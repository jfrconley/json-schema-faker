/* src/web/js/lib/Gists.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text
} from "svelte/internal";

import { onMount } from 'svelte';
import { navigateTo } from 'yrv';
import { all, loggedIn } from './gists';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i][0];
	child_ctx[11] = list[i][1];
	return child_ctx;
}

// (24:0) {#if $loggedIn}
function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*pending*/ ctx[1]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (27:2) {:else}
function create_else_block(ctx) {
	let ol;
	let each_value = /*filtered*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ol, "class", "lr zb max");
		},
		m(target, anchor) {
			insert(target, ol, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ol, null);
				}
			}
		},
		p(ctx, dirty) {
			if (dirty & /*Object, filtered, navigateTo*/ 4) {
				each_value = /*filtered*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(ol);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (25:2) {#if pending}
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Loading gists...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (36:12) {#each Object.entries(item.files) as [file, info]}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t0_value = /*file*/ ctx[10] + "";
	let t0;
	let t1;
	let t2_value = (/*info*/ ctx[11].size / 1024).toFixed(2) + "";
	let t2;
	let t3;
	let a_title_value;
	let a_href_value;
	let t4;

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = text(" â€” ");
			t2 = text(t2_value);
			t3 = text("KB");
			t4 = space();
			attr(a, "class", "arr bl");
			attr(a, "title", a_title_value = "Type: " + /*info*/ ctx[11].type);
			attr(a, "target", "_blank");
			attr(a, "href", a_href_value = /*info*/ ctx[11].raw_url);
			attr(li, "class", "ni");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			append(a, t2);
			append(a, t3);
			append(li, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*filtered*/ 4 && t0_value !== (t0_value = /*file*/ ctx[10] + "")) set_data(t0, t0_value);
			if (dirty & /*filtered*/ 4 && t2_value !== (t2_value = (/*info*/ ctx[11].size / 1024).toFixed(2) + "")) set_data(t2, t2_value);

			if (dirty & /*filtered*/ 4 && a_title_value !== (a_title_value = "Type: " + /*info*/ ctx[11].type)) {
				attr(a, "title", a_title_value);
			}

			if (dirty & /*filtered*/ 4 && a_href_value !== (a_href_value = /*info*/ ctx[11].raw_url)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (29:6) {#each filtered as item}
function create_each_block(ctx) {
	let li;
	let div;
	let a;
	let t0_value = (/*item*/ ctx[7].description || /*item*/ ctx[7].id) + "";
	let t0;
	let a_href_value;
	let t1;
	let button;
	let t3;
	let ul;
	let t4;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[6](/*item*/ ctx[7]);
	}

	let each_value_1 = Object.entries(/*item*/ ctx[7].files);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			li = element("li");
			div = element("div");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			button = element("button");
			button.textContent = "Load gist";
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			attr(a, "class", "tdn tr flx-a");
			attr(a, "target", "_blank");
			attr(a, "href", a_href_value = /*item*/ ctx[7].html_url);
			attr(button, "class", "bu min tr nosl");
			attr(div, "class", "flx flx-c");
			attr(ul, "class", "lr");
			attr(li, "class", "mb ni");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, a);
			append(a, t0);
			append(div, t1);
			append(div, button);
			append(li, t3);
			append(li, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}

			append(li, t4);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*filtered*/ 4 && t0_value !== (t0_value = (/*item*/ ctx[7].description || /*item*/ ctx[7].id) + "")) set_data(t0, t0_value);

			if (dirty & /*filtered*/ 4 && a_href_value !== (a_href_value = /*item*/ ctx[7].html_url)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*Object, filtered*/ 4) {
				each_value_1 = Object.entries(/*item*/ ctx[7].files);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let label;
	let span;
	let t1;
	let input;
	let t2;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*$loggedIn*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			label = element("label");
			span = element("span");
			span.textContent = "Filter gists:";
			t1 = space();
			input = element("input");
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(input, "class", "f ml flx-a");
			attr(input, "type", "search");
			attr(label, "class", "mb flx flx-c nosl");
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, span);
			append(label, t1);
			append(label, input);
			set_input_value(input, /*term*/ ctx[0]);
			insert(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*term*/ 1 && input.value !== /*term*/ ctx[0]) {
				set_input_value(input, /*term*/ ctx[0]);
			}

			if (/*$loggedIn*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(label);
			if (detaching) detach(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let filtered;
	let $loggedIn;
	component_subscribe($$self, loggedIn, $$value => $$invalidate(3, $loggedIn = $$value));
	let term = '';
	let data = [];
	let pending = true;

	onMount(async () => {
		if ($loggedIn) $$invalidate(4, data = await all());
		$$invalidate(1, pending = false);
	});

	function input_input_handler() {
		term = this.value;
		$$invalidate(0, term);
	}

	const click_handler = item => navigateTo(`/#gist/${item.id}`);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data, term*/ 17) {
			$: $$invalidate(2, filtered = data.filter(x => !term || x.description.toLowerCase().includes(term.toLowerCase()) || Object.keys(x.files).some(k => k.toLowerCase().includes(term.toLowerCase()))));
		}
	};

	return [term, pending, filtered, $loggedIn, data, input_input_handler, click_handler];
}

class Gists extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Gists;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiR2lzdHMuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuICBpbXBvcnQgeyBuYXZpZ2F0ZVRvIH0gZnJvbSAneXJ2JztcbiAgaW1wb3J0IHsgYWxsLCBsb2dnZWRJbiB9IGZyb20gJy4vZ2lzdHMnO1xuXG4gIGxldCB0ZXJtID0gJyc7XG4gIGxldCBkYXRhID0gW107XG4gIGxldCBwZW5kaW5nID0gdHJ1ZTtcblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICBpZiAoJGxvZ2dlZEluKSBkYXRhID0gYXdhaXQgYWxsKCk7XG4gICAgcGVuZGluZyA9IGZhbHNlO1xuICB9KTtcblxuICAkOiBmaWx0ZXJlZCA9IGRhdGEuZmlsdGVyKHggPT5cbiAgICAhdGVybVxuICAgIHx8IHguZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0ZXJtLnRvTG93ZXJDYXNlKCkpXG4gICAgfHwgT2JqZWN0LmtleXMoeC5maWxlcykuc29tZShrID0+IGsudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0ZXJtLnRvTG93ZXJDYXNlKCkpKSk7XG48L3NjcmlwdD5cbjxsYWJlbCBjbGFzcz1cIm1iIGZseCBmbHgtYyBub3NsXCI+XG4gIDxzcGFuPkZpbHRlciBnaXN0czo8L3NwYW4+XG4gIDxpbnB1dCBjbGFzcz1cImYgbWwgZmx4LWFcIiB0eXBlPVwic2VhcmNoXCIgYmluZDp2YWx1ZT17dGVybX0gLz5cbjwvbGFiZWw+XG57I2lmICRsb2dnZWRJbn1cbiAgeyNpZiBwZW5kaW5nfVxuICAgIExvYWRpbmcgZ2lzdHMuLi5cbiAgezplbHNlfVxuICAgIDxvbCBjbGFzcz1cImxyIHpiIG1heFwiPlxuICAgICAgeyNlYWNoIGZpbHRlcmVkIGFzIGl0ZW19XG4gICAgICAgIDxsaSBjbGFzcz1cIm1iIG5pXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZseCBmbHgtY1wiPlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJ0ZG4gdHIgZmx4LWFcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwie2l0ZW0uaHRtbF91cmx9XCI+e2l0ZW0uZGVzY3JpcHRpb24gfHwgaXRlbS5pZH08L2E+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnUgbWluIHRyIG5vc2xcIiBvbjpjbGljaz17KCkgPT4gbmF2aWdhdGVUbyhgLyNnaXN0LyR7aXRlbS5pZH1gKX0+TG9hZCBnaXN0PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPHVsIGNsYXNzPVwibHJcIj5cbiAgICAgICAgICAgIHsjZWFjaCBPYmplY3QuZW50cmllcyhpdGVtLmZpbGVzKSBhcyBbZmlsZSwgaW5mb119XG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cIm5pXCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJhcnIgYmxcIiB0aXRsZT1cIlR5cGU6IHtpbmZvLnR5cGV9XCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIntpbmZvLnJhd191cmx9XCI+e2ZpbGV9ICZtZGFzaDsgeyhpbmZvLnNpemUgLyAxMDI0KS50b0ZpeGVkKDIpfUtCPC9hPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvbGk+XG4gICAgICB7L2VhY2h9XG4gICAgPC9vbD5cbiAgey9pZn1cbnsvaWZ9XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUNXLE9BQU8sUUFBUSxRQUFRO1NBQ3ZCLFVBQVUsUUFBUSxLQUFLO1NBQ3ZCLEdBQUcsRUFBRSxRQUFRLFFBQVEsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0JBcUJsQyxHQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBSUQsR0FBUTs7O2dDQUFiLE1BQUk7Ozs7Ozs7Ozs7Ozs7OztHQURSLE1BZ0JLOzs7Ozs7Ozs7OzhCQWZJLEdBQVE7OzsrQkFBYixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O29DQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7WUFKRyxrQkFFYjs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFXaUcsR0FBSTs7OzBCQUFZLEdBQUksS0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7YUFBdEMsS0FBUzs7YUFBK0IsSUFBRTs7O3dEQUFsRyxHQUFJLEtBQUMsSUFBSTs7MkNBQTBCLEdBQUksS0FBQyxPQUFPOzs7O0dBRGpGLE1BRUs7R0FESCxNQUFzSTs7Ozs7Ozs7bUVBQW5ELEdBQUk7b0VBQVksR0FBSSxLQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7O3dGQUE5RixHQUFJLEtBQUMsSUFBSTs7OzsyRUFBMEIsR0FBSSxLQUFDLE9BQU87Ozs7Ozs7Ozs7Ozs7OzswQkFObkIsR0FBSSxJQUFDLFdBQVcsYUFBSSxHQUFJLElBQUMsRUFBRTs7Ozs7Ozs7Ozs7Ozs7O29CQUlwRixNQUFNLENBQUMsT0FBTyxVQUFDLEdBQUksSUFBQyxLQUFLOzs7a0NBQTlCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJDQUp5QyxHQUFJLElBQUMsUUFBUTs7Ozs7OztHQUZoRSxNQVlLO0dBWEgsTUFHTTtHQUZKLE1BQWdHOzs7R0FDaEcsTUFBa0c7O0dBRXBHLE1BTUs7Ozs7Ozs7Ozs7Ozs7Ozs7O29FQVQ2RCxHQUFJLElBQUMsV0FBVyxhQUFJLEdBQUksSUFBQyxFQUFFOzsyRUFBNUMsR0FBSSxJQUFDLFFBQVE7Ozs7O21CQUlyRCxNQUFNLENBQUMsT0FBTyxVQUFDLEdBQUksSUFBQyxLQUFLOzs7aUNBQTlCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7c0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzhCQVpiLEdBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBSmQsTUFHUTtHQUZOLE1BQTBCOztHQUMxQixNQUE0RDttQ0FBUixHQUFJOzs7Ozs7Ozs7OztzREFBSixHQUFJO29DQUFKLEdBQUk7OztxQkFFckQsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBbEJSLElBQUksR0FBRyxFQUFFO0tBQ1QsSUFBSTtLQUNKLE9BQU8sR0FBRyxJQUFJOztDQUVsQixPQUFPO01BQ0QsU0FBUyxrQkFBRSxJQUFJLFNBQVMsR0FBRztrQkFDL0IsT0FBTyxHQUFHLEtBQUs7Ozs7RUFVbUMsSUFBSTs7OzsrQkFXQyxVQUFVLFdBQVcsSUFBSSxDQUFDLEVBQUU7Ozs7R0FsQnJGLENBQUMsa0JBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUN4QixJQUFJLElBQ0YsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLE9BQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXOzs7Ozs7Ozs7Ozs7OzsifQ==