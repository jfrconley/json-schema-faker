/* src/web/js/lib/Opts.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	bubble,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	select_option,
	select_options,
	set_attributes,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import Modal from './Modal.svelte';
import { options } from './gists';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (98:12) {:else}
function create_else_block(ctx) {
	let select;
	let select_title_value;
	let mounted;
	let dispose;
	let each_value_1 = /*vals*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let select_levels = [
		/*option*/ ctx[11],
		{
			title: select_title_value = /*option*/ ctx[11].name
		}
	];

	let select_data = {};

	for (let i = 0; i < select_levels.length; i += 1) {
		select_data = assign(select_data, select_levels[i]);
	}

	function change_handler_1(...args) {
		return /*change_handler_1*/ ctx[7](/*option*/ ctx[11], ...args);
	}

	return {
		c() {
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(select, select_data);
		},
		m(target, anchor) {
			insert(target, select, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(select, null);
				}
			}

			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
			if (select.autofocus) select.focus();

			if (!mounted) {
				dispose = listen(select, "change", change_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*vals, opts, JSON*/ 6) {
				each_value_1 = /*vals*/ ctx[2];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*opts*/ 2 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);
		},
		d(detaching) {
			if (detaching) detach(select);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (96:12) {#if option.type}
function create_if_block(ctx) {
	let input;
	let input_title_value;
	let mounted;
	let dispose;

	let input_levels = [
		/*option*/ ctx[11],
		{
			title: input_title_value = /*option*/ ctx[11].name
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	function change_handler(...args) {
		return /*change_handler*/ ctx[6](/*option*/ ctx[11], ...args);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();

			if (!mounted) {
				dispose = listen(input, "change", change_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (101:16) {#each vals as value}
function create_each_block_1(ctx) {
	let option;

	let t_value = (typeof /*value*/ ctx[14] !== 'undefined'
	? JSON.stringify(/*value*/ ctx[14])
	: '') + "";

	let t;
	let option_value_value;
	let option_selected_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*value*/ ctx[14];
			option.value = option.__value;
			option.selected = option_selected_value = /*value*/ ctx[14] === /*option*/ ctx[11].value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (92:6) {#each opts as option}
function create_each_block(ctx) {
	let li;
	let label;
	let t0_value = /*option*/ ctx[11].name + "";
	let t0;
	let label_for_value;
	let t1;
	let span;
	let t2;

	function select_block_type(ctx, dirty) {
		if (/*option*/ ctx[11].type) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			li = element("li");
			label = element("label");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			if_block.c();
			t2 = space();
			attr(label, "for", label_for_value = /*option*/ ctx[11].id);
			attr(label, "class", "tr cl-6");
			attr(span, "class", "flx-gw");
			attr(li, "class", "nosl flx gap");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, label);
			append(label, t0);
			append(li, t1);
			append(li, span);
			if_block.m(span, null);
			append(li, t2);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (detaching) detach(li);
			if_block.d();
		}
	};
}

// (85:0) <Modal let:back>
function create_default_slot(ctx) {
	let t0;
	let a0;
	let t2;
	let hr0;
	let t3;
	let form;
	let ul;
	let t4;
	let button0;
	let t5;
	let button0_disabled_value;
	let t6;
	let button1;
	let t8;
	let hr1;
	let t9;
	let a1;
	let t11;
	let a2;
	let t13;
	let a3;
	let t15;
	let a4;
	let t17;
	let a5;
	let t19;
	let a6;
	let t21;
	let a7;
	let t23;
	let a8;
	let t25;
	let a9;
	let t27;
	let a10;
	let t29;
	let a11;
	let t31;
	let a12;
	let t33;
	let a13;
	let t35;
	let hr2;
	let t36;
	let a14;
	let t38;
	let a15;
	let t40;
	let a16;
	let t42;
	let a17;
	let t44;
	let a18;
	let t46;
	let a19;
	let t48;
	let a20;
	let mounted;
	let dispose;
	let each_value = /*opts*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			t0 = text("Reference: ");
			a0 = element("a");
			a0.textContent = "available options";
			t2 = space();
			hr0 = element("hr");
			t3 = space();
			form = element("form");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			button0 = element("button");
			t5 = text("Reset to defaults");
			t6 = space();
			button1 = element("button");
			button1.textContent = "Apply";
			t8 = space();
			hr1 = element("hr");
			t9 = space();
			a1 = element("a");
			a1.textContent = "boolean";
			t11 = text(" |\n  ");
			a2 = element("a");
			a2.textContent = "integer";
			t13 = text(" |\n  ");
			a3 = element("a");
			a3.textContent = "inner-references";
			t15 = text(" |\n  ");
			a4 = element("a");
			a4.textContent = "external-references";
			t17 = text(" |\n  ");
			a5 = element("a");
			a5.textContent = "enums";
			t19 = text(" |\n  ");
			a6 = element("a");
			a6.textContent = "fixed values";
			t21 = text(" |\n  ");
			a7 = element("a");
			a7.textContent = "n-times repeated";
			t23 = text(" |\n  ");
			a8 = element("a");
			a8.textContent = "faker-properties";
			t25 = text(" |\n  ");
			a9 = element("a");
			a9.textContent = "faker.fake()";
			t27 = text(" |\n  ");
			a10 = element("a");
			a10.textContent = "chance-guid";
			t29 = text(" |\n  ");
			a11 = element("a");
			a11.textContent = "chance-name";
			t31 = text(" |\n  ");
			a12 = element("a");
			a12.textContent = "chance-properties";
			t33 = text(" |\n  ");
			a13 = element("a");
			a13.textContent = "remote-schemas (^0.5.x)";
			t35 = space();
			hr2 = element("hr");
			t36 = space();
			a14 = element("a");
			a14.textContent = "JSON-Schema.org";
			t38 = text(" |\n  ");
			a15 = element("a");
			a15.textContent = "GitHub";
			t40 = text(" / ");
			a16 = element("a");
			a16.textContent = "CI";
			t42 = text(" |\n  ");
			a17 = element("a");
			a17.textContent = "Contribution";
			t44 = text(" |\n  ");
			a18 = element("a");
			a18.textContent = "AngularJS module";
			t46 = text(" |\n  ");
			a19 = element("a");
			a19.textContent = "Grunt plugin";
			t48 = text(" |\n  ");
			a20 = element("a");
			a20.textContent = "JSF Server";
			attr(a0, "href", "//github.com/json-schema-faker/json-schema-faker/tree/master/docs#available-options");
			attr(a0, "target", "_blank");
			attr(ul, "class", "lr flx flx-wp gap opts");
			attr(button0, "class", "bu");
			button0.disabled = button0_disabled_value = /*$options*/ ctx[0] === null;
			attr(button1, "class", "bu");
			attr(a1, "href", "#gist/da0af4611cb5622b54aff57283560da3");
			attr(a2, "href", "#gist/4199ca90fb5cd05337824b0695d17b5e");
			attr(a3, "href", "#gist/d9e27543d84157c1672f87e93ac250cc");
			attr(a4, "href", "#gist/5f81f118fbd4eac01ccacf23a061a8b9");
			attr(a5, "href", "#gist/cbb4871d1d2f44760ddafdaa056e1926");
			attr(a6, "href", "#gist/1f1196844bead96e021ffbd597edcffa");
			attr(a7, "href", "#gist/f4ad1818735f0d0babdc1f12b92013f1");
			attr(a8, "href", "#gist/1902737e7bef9573af02a3fc49761c13");
			attr(a9, "href", "#gist/1a7db173362b127a826a5c2fa7de7561");
			attr(a10, "href", "#gist/5dd364aad2d48729efff686c5f7c44b2");
			attr(a11, "href", "#gist/682f97a2e28e230b51810c55b92f4cdc");
			attr(a12, "href", "#gist/426c2d177243cd2c52594f92c1a7862e");
			attr(a13, "href", "#gist/d3e75b22ad33e4440df19e0cc060c9f3/0.5.0-rc3");
			attr(a14, "href", "http://json-schema.org");
			attr(a14, "target", "_blank");
			attr(a15, "href", "//github.com/json-schema-faker/json-schema-faker/");
			attr(a15, "target", "_blank");
			attr(a16, "href", "//travis-ci.org/json-schema-faker/json-schema-faker");
			attr(a16, "target", "_blank");
			attr(a17, "href", "//github.com/json-schema-faker/json-schema-faker/issues/new");
			attr(a17, "target", "_blank");
			attr(a18, "href", "//github.com/json-schema-faker/angular-jsf");
			attr(a18, "target", "_blank");
			attr(a19, "href", "//github.com/json-schema-faker/grunt-jsonschema-faker");
			attr(a19, "target", "_blank");
			attr(a20, "href", "//github.com/json-schema-faker/json-schema-server");
			attr(a20, "target", "_blank");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, a0, anchor);
			insert(target, t2, anchor);
			insert(target, hr0, anchor);
			insert(target, t3, anchor);
			insert(target, form, anchor);
			append(form, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}

			append(form, t4);
			append(form, button0);
			append(button0, t5);
			append(form, t6);
			append(form, button1);
			insert(target, t8, anchor);
			insert(target, hr1, anchor);
			insert(target, t9, anchor);
			insert(target, a1, anchor);
			insert(target, t11, anchor);
			insert(target, a2, anchor);
			insert(target, t13, anchor);
			insert(target, a3, anchor);
			insert(target, t15, anchor);
			insert(target, a4, anchor);
			insert(target, t17, anchor);
			insert(target, a5, anchor);
			insert(target, t19, anchor);
			insert(target, a6, anchor);
			insert(target, t21, anchor);
			insert(target, a7, anchor);
			insert(target, t23, anchor);
			insert(target, a8, anchor);
			insert(target, t25, anchor);
			insert(target, a9, anchor);
			insert(target, t27, anchor);
			insert(target, a10, anchor);
			insert(target, t29, anchor);
			insert(target, a11, anchor);
			insert(target, t31, anchor);
			insert(target, a12, anchor);
			insert(target, t33, anchor);
			insert(target, a13, anchor);
			insert(target, t35, anchor);
			insert(target, hr2, anchor);
			insert(target, t36, anchor);
			insert(target, a14, anchor);
			insert(target, t38, anchor);
			insert(target, a15, anchor);
			insert(target, t40, anchor);
			insert(target, a16, anchor);
			insert(target, t42, anchor);
			insert(target, a17, anchor);
			insert(target, t44, anchor);
			insert(target, a18, anchor);
			insert(target, t46, anchor);
			insert(target, a19, anchor);
			insert(target, t48, anchor);
			insert(target, a20, anchor);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*reset*/ ctx[4]),
					listen(button1, "click", function () {
						if (is_function(/*back*/ ctx[10])) /*back*/ ctx[10].apply(this, arguments);
					}),
					listen(form, "submit", prevent_default(/*submit_handler*/ ctx[5]))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*opts, update, vals, JSON*/ 14) {
				each_value = /*opts*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*$options*/ 1 && button0_disabled_value !== (button0_disabled_value = /*$options*/ ctx[0] === null)) {
				button0.disabled = button0_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(a0);
			if (detaching) detach(t2);
			if (detaching) detach(hr0);
			if (detaching) detach(t3);
			if (detaching) detach(form);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t8);
			if (detaching) detach(hr1);
			if (detaching) detach(t9);
			if (detaching) detach(a1);
			if (detaching) detach(t11);
			if (detaching) detach(a2);
			if (detaching) detach(t13);
			if (detaching) detach(a3);
			if (detaching) detach(t15);
			if (detaching) detach(a4);
			if (detaching) detach(t17);
			if (detaching) detach(a5);
			if (detaching) detach(t19);
			if (detaching) detach(a6);
			if (detaching) detach(t21);
			if (detaching) detach(a7);
			if (detaching) detach(t23);
			if (detaching) detach(a8);
			if (detaching) detach(t25);
			if (detaching) detach(a9);
			if (detaching) detach(t27);
			if (detaching) detach(a10);
			if (detaching) detach(t29);
			if (detaching) detach(a11);
			if (detaching) detach(t31);
			if (detaching) detach(a12);
			if (detaching) detach(t33);
			if (detaching) detach(a13);
			if (detaching) detach(t35);
			if (detaching) detach(hr2);
			if (detaching) detach(t36);
			if (detaching) detach(a14);
			if (detaching) detach(t38);
			if (detaching) detach(a15);
			if (detaching) detach(t40);
			if (detaching) detach(a16);
			if (detaching) detach(t42);
			if (detaching) detach(a17);
			if (detaching) detach(t44);
			if (detaching) detach(a18);
			if (detaching) detach(t46);
			if (detaching) detach(a19);
			if (detaching) detach(t48);
			if (detaching) detach(a20);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: {
					default: [
						create_default_slot,
						({ back }) => ({ 10: back }),
						({ back }) => back ? 1024 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const modal_changes = {};

			if (dirty & /*$$scope, back, $options*/ 132097) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $options;
	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
	const defaults = JSONSchemaFaker.option.getDefaults();
	const opts = Object.keys(defaults).map(key => getType(key, defaults[key]));

	const vals = [
		undefined,
		0,
		-1,
		null,
		true,
		false,
		'string',
		'number',
		'integer',
		'boolean',
		'object',
		'array'
	];

	// FIXME: componentize options, subscribe to them and update global jsf options on change
	function getType(k, v) {
		const extraProps = { class: 'f' };
		let fixedType;

		if (v instanceof Date) {
			fixedType = 'date';
		} else if (Array.isArray(v)) {
			fixedType = 'text';
		} else if (typeof v === 'boolean') {
			fixedType = 'checkbox';
		} else if (typeof v === 'number') {
			fixedType = 'number';
		} else if (v === null || typeof v === 'function') {
			if (k === 'maxItems' || k === 'maxLength') {
				fixedType = 'number';
			}

			if (k === 'random' || k === 'optionalsProbability') {
				extraProps.step = k === 'random' ? '0.01' : '0.1';
				fixedType = 'number';
			}
		}

		const result = $options && $options[k] || defaults[k];

		if (fixedType === 'checkbox') {
			extraProps.checked = result;
			extraProps.class = '';
		} else if (fixedType === 'date') {
			extraProps.value = v.toISOString().substr(0, 10);
		} else if (fixedType === 'number') {
			extraProps.value = result;
		}

		if (fixedType) {
			extraProps.type = fixedType;
		}

		return { ...extraProps, name: k, id: k };
	}

	function update(e, option) {
		if (!$options) set_store_value(options, $options = {}, $options);

		if (option.type === 'number') {
			set_store_value(options, $options[option.name] = parseFloat(e.target.value), $options);
		} else if (option.type === 'checkbox') {
			set_store_value(options, $options[option.name] = e.target.checked, $options);
		} else {
			set_store_value(options, $options[option.name] = e.target.value, $options);
		}
	}

	function reset() {
		set_store_value(options, $options = null, $options);

		Object.keys(defaults).forEach(key => {
			const node = document.querySelector(`[name=${key}]`);
			const { type, value } = getType(key, defaults[key]);

			if (typeof value === 'number') {
				node.value = value;
			} else if (Array.isArray(value)) {
				node.value = value.join(',');
			} else {
				node.value = '';
			}
		});
	}

	function submit_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler = (option, e) => update(e, option);
	const change_handler_1 = (option, e) => update(e, option);

	return [
		$options,
		opts,
		vals,
		update,
		reset,
		submit_handler,
		change_handler,
		change_handler_1
	];
}

class Opts extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Opts;//# sourceMappingURL=data:application/json;charset=utf-8;base64,