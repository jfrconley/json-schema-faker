/* src/web/js/lib/Auth.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import { Router, Route, Link, navigateTo } from 'yrv';
import { me, url, schemas, current, session, loggedIn } from './gists';
import Icon from './Icon.svelte';
import Opts from './Opts.svelte';
import Save from './Save.svelte';
import Gists from './Gists.svelte';
import Modal from './Modal.svelte';

function create_default_slot_9(ctx) {
	let icon;
	let t;
	let current;
	icon = new Icon({ props: { name: "gear" } });

	return {
		c() {
			create_component(icon.$$.fragment);
			t = text(" Options");
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
			if (detaching) detach(t);
		}
	};
}

// (51:4) {:else}
function create_else_block(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				open: "width=400,height=640",
				href: url(),
				class: "a",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	link.$on("close", /*done*/ ctx[2]);

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (47:4) {#if $loggedIn}
function create_if_block(ctx) {
	let link;
	let current;

	link = new Link({
			props: {
				href: "#session",
				class: "a nosl",
				title: /*$session*/ ctx[1].fullname,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*$session*/ 2) link_changes.title = /*$session*/ ctx[1].fullname;

			if (dirty & /*$$scope, $session*/ 130) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (52:6) <Link open="width=400,height=640" href={url()} on:close={done} class="a">
function create_default_slot_8(ctx) {
	let icon;
	let t;
	let current;
	icon = new Icon({ props: { name: "github" } });

	return {
		c() {
			create_component(icon.$$.fragment);
			t = text(" Share link? Log in");
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
			if (detaching) detach(t);
		}
	};
}

// (48:6) <Link href="#session" class="a nosl" title={$session.fullname}>
function create_default_slot_7(ctx) {
	let icon;
	let t0;
	let t1_value = /*$session*/ ctx[1].username + "";
	let t1;
	let current;
	icon = new Icon({ props: { name: "github" } });

	return {
		c() {
			create_component(icon.$$.fragment);
			t0 = space();
			t1 = text(t1_value);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$session*/ 2) && t1_value !== (t1_value = /*$session*/ ctx[1].username + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (63:6) <Link href="/" on:click={add}>
function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("New project");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (64:6) <Link href="/logout" on:click={exit}>
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("Log out");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (65:6) <Link href="#session/save">
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("Save project...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (66:6) <Link href="#session/open">
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("Schemas");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (62:4) <Modal>
function create_default_slot_2(ctx) {
	let link0;
	let t0;
	let link1;
	let t1;
	let link2;
	let t2;
	let link3;
	let t3;
	let route0;
	let t4;
	let route1;
	let current;

	link0 = new Link({
			props: {
				href: "/",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	link0.$on("click", /*add*/ ctx[4]);

	link1 = new Link({
			props: {
				href: "/logout",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	link1.$on("click", /*exit*/ ctx[3]);

	link2 = new Link({
			props: {
				href: "#session/save",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	link3 = new Link({
			props: {
				href: "#session/open",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route0 = new Route({
			props: { path: "/open", component: Gists }
		});

	route1 = new Route({
			props: { path: "/save", component: Save }
		});

	return {
		c() {
			create_component(link0.$$.fragment);
			t0 = text(" |\n      ");
			create_component(link1.$$.fragment);
			t1 = space();
			create_component(link2.$$.fragment);
			t2 = text(" |\n      ");
			create_component(link3.$$.fragment);
			t3 = text(" |\n      ");
			create_component(route0.$$.fragment);
			t4 = space();
			create_component(route1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link0, target, anchor);
			insert(target, t0, anchor);
			mount_component(link1, target, anchor);
			insert(target, t1, anchor);
			mount_component(link2, target, anchor);
			insert(target, t2, anchor);
			mount_component(link3, target, anchor);
			insert(target, t3, anchor);
			mount_component(route0, target, anchor);
			insert(target, t4, anchor);
			mount_component(route1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link0_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
			const link2_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link2_changes.$$scope = { dirty, ctx };
			}

			link2.$set(link2_changes);
			const link3_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link3_changes.$$scope = { dirty, ctx };
			}

			link3.$set(link3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			transition_in(link2.$$.fragment, local);
			transition_in(link3.$$.fragment, local);
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			transition_out(link2.$$.fragment, local);
			transition_out(link3.$$.fragment, local);
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link0, detaching);
			if (detaching) detach(t0);
			destroy_component(link1, detaching);
			if (detaching) detach(t1);
			destroy_component(link2, detaching);
			if (detaching) detach(t2);
			destroy_component(link3, detaching);
			if (detaching) detach(t3);
			destroy_component(route0, detaching);
			if (detaching) detach(t4);
			destroy_component(route1, detaching);
		}
	};
}

// (61:2) <Route path="#session">
function create_default_slot_1(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope*/ 128) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (59:0) <Router>
function create_default_slot(ctx) {
	let route0;
	let t;
	let route1;
	let current;

	route0 = new Route({
			props: { path: "#options", component: Opts }
		});

	route1 = new Route({
			props: {
				path: "#session",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route0.$$.fragment);
			t = space();
			create_component(route1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route0, target, anchor);
			insert(target, t, anchor);
			mount_component(route1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const route1_changes = {};

			if (dirty & /*$$scope*/ 128) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route0, detaching);
			if (detaching) detach(t);
			destroy_component(route1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let ul;
	let li0;
	let link;
	let t0;
	let li1;
	let current_block_type_index;
	let if_block;
	let t1;
	let router;
	let current;

	link = new Link({
			props: {
				href: "#options",
				class: "a",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$loggedIn*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	router = new Router({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			ul = element("ul");
			li0 = element("li");
			create_component(link.$$.fragment);
			t0 = space();
			li1 = element("li");
			if_block.c();
			t1 = space();
			create_component(router.$$.fragment);
			attr(li0, "class", "sp pd dib nosl");
			attr(li1, "class", "ar dib");
			attr(ul, "class", "p lr ln mt rel jsf-about");
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			mount_component(link, li0, null);
			append(ul, t0);
			append(ul, li1);
			if_blocks[current_block_type_index].m(li1, null);
			insert(target, t1, anchor);
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const link_changes = {};

			if (dirty & /*$$scope*/ 128) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li1, null);
			}

			const router_changes = {};

			if (dirty & /*$$scope*/ 128) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			transition_in(if_block);
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			transition_out(if_block);
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_component(link);
			if_blocks[current_block_type_index].d();
			if (detaching) detach(t1);
			destroy_component(router, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $current;
	let $schemas;
	let $loggedIn;
	let $session;
	component_subscribe($$self, current, $$value => $$invalidate(5, $current = $$value));
	component_subscribe($$self, schemas, $$value => $$invalidate(6, $schemas = $$value));
	component_subscribe($$self, loggedIn, $$value => $$invalidate(0, $loggedIn = $$value));
	component_subscribe($$self, session, $$value => $$invalidate(1, $session = $$value));

	function done() {
		me().then(data => {
			if (!data.login) return;
			set_store_value(loggedIn, $loggedIn = true, $loggedIn);

			set_store_value(
				session,
				$session = {
					username: data.login,
					fullname: data.name
				},
				$session
			);

			window.localStorage._DATA = JSON.stringify($session);
		});
	}

	function exit() {
		window.localStorage._AUTH = '';
		set_store_value(loggedIn, $loggedIn = null, $loggedIn);
		navigateTo('/');
	}

	function add() {
		set_store_value(schemas, $schemas = [], $schemas);
		set_store_value(current, $current = null, $current);
		navigateTo('/');
	}

	return [$loggedIn, $session, done, exit, add];
}

class Auth extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Auth;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQXV0aC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgUm91dGVyLCBSb3V0ZSwgTGluaywgbmF2aWdhdGVUbyB9IGZyb20gJ3lydic7XG4gIGltcG9ydCB7XG4gICAgbWUsIHVybCwgc2NoZW1hcywgY3VycmVudCwgc2Vzc2lvbiwgbG9nZ2VkSW4sXG4gIH0gZnJvbSAnLi9naXN0cyc7XG5cbiAgaW1wb3J0IEljb24gZnJvbSAnLi9JY29uLnN2ZWx0ZSc7XG4gIGltcG9ydCBPcHRzIGZyb20gJy4vT3B0cy5zdmVsdGUnO1xuICBpbXBvcnQgU2F2ZSBmcm9tICcuL1NhdmUuc3ZlbHRlJztcbiAgaW1wb3J0IEdpc3RzIGZyb20gJy4vR2lzdHMuc3ZlbHRlJztcbiAgaW1wb3J0IE1vZGFsIGZyb20gJy4vTW9kYWwuc3ZlbHRlJztcblxuICBmdW5jdGlvbiBkb25lKCkge1xuICAgIG1lKCkudGhlbihkYXRhID0+IHtcbiAgICAgIGlmICghZGF0YS5sb2dpbikgcmV0dXJuO1xuXG4gICAgICAkbG9nZ2VkSW4gPSB0cnVlO1xuICAgICAgJHNlc3Npb24gPSB7XG4gICAgICAgIHVzZXJuYW1lOiBkYXRhLmxvZ2luLFxuICAgICAgICBmdWxsbmFtZTogZGF0YS5uYW1lLFxuICAgICAgfTtcblxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5fREFUQSA9IEpTT04uc3RyaW5naWZ5KCRzZXNzaW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4aXQoKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5fQVVUSCA9ICcnO1xuICAgICRsb2dnZWRJbiA9IG51bGw7XG4gICAgbmF2aWdhdGVUbygnLycpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkKCkge1xuICAgICRzY2hlbWFzID0gW107XG4gICAgJGN1cnJlbnQgPSBudWxsO1xuICAgIG5hdmlnYXRlVG8oJy8nKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjx1bCBjbGFzcz1cInAgbHIgbG4gbXQgcmVsIGpzZi1hYm91dFwiPlxuICA8bGkgY2xhc3M9XCJzcCBwZCBkaWIgbm9zbFwiPlxuICAgIDxMaW5rIGhyZWY9XCIjb3B0aW9uc1wiIGNsYXNzPVwiYVwiPlxuICAgICAgPEljb24gbmFtZT1cImdlYXJcIiAvPiBPcHRpb25zXG4gICAgPC9MaW5rPlxuICA8L2xpPlxuICA8bGkgY2xhc3M9XCJhciBkaWJcIj5cbiAgICB7I2lmICRsb2dnZWRJbn1cbiAgICAgIDxMaW5rIGhyZWY9XCIjc2Vzc2lvblwiIGNsYXNzPVwiYSBub3NsXCIgdGl0bGU9eyRzZXNzaW9uLmZ1bGxuYW1lfT5cbiAgICAgICAgPEljb24gbmFtZT1cImdpdGh1YlwiIC8+IHskc2Vzc2lvbi51c2VybmFtZX1cbiAgICAgIDwvTGluaz5cbiAgICB7OmVsc2V9XG4gICAgICA8TGluayBvcGVuPVwid2lkdGg9NDAwLGhlaWdodD02NDBcIiBocmVmPXt1cmwoKX0gb246Y2xvc2U9e2RvbmV9IGNsYXNzPVwiYVwiPlxuICAgICAgICA8SWNvbiBuYW1lPVwiZ2l0aHViXCIgLz4gU2hhcmUgbGluaz8gTG9nIGluXG4gICAgICA8L0xpbms+XG4gICAgey9pZn1cbiAgPC9saT5cbjwvdWw+XG5cbjxSb3V0ZXI+XG4gIDxSb3V0ZSBwYXRoPVwiI29wdGlvbnNcIiBjb21wb25lbnQ9e09wdHN9IC8+XG4gIDxSb3V0ZSBwYXRoPVwiI3Nlc3Npb25cIj5cbiAgICA8TW9kYWw+XG4gICAgICA8TGluayBocmVmPVwiL1wiIG9uOmNsaWNrPXthZGR9Pk5ldyBwcm9qZWN0PC9MaW5rPiB8XG4gICAgICA8TGluayBocmVmPVwiL2xvZ291dFwiIG9uOmNsaWNrPXtleGl0fT5Mb2cgb3V0PC9MaW5rPlxuICAgICAgPExpbmsgaHJlZj1cIiNzZXNzaW9uL3NhdmVcIj5TYXZlIHByb2plY3QuLi48L0xpbms+IHxcbiAgICAgIDxMaW5rIGhyZWY9XCIjc2Vzc2lvbi9vcGVuXCI+U2NoZW1hczwvTGluaz4gfFxuICAgICAgPFJvdXRlIHBhdGg9XCIvb3BlblwiIGNvbXBvbmVudD17R2lzdHN9IC8+XG4gICAgICA8Um91dGUgcGF0aD1cIi9zYXZlXCIgY29tcG9uZW50PXtTYXZlfSAvPlxuICAgIDwvTW9kYWw+XG4gIDwvUm91dGU+XG48L1JvdXRlcj5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUNXLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsUUFBUSxLQUFLO1NBRW5ELEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxRQUN2QyxTQUFTO09BRVQsSUFBSSxNQUFNLGVBQWU7T0FDekIsSUFBSSxNQUFNLGVBQWU7T0FDekIsSUFBSSxNQUFNLGVBQWU7T0FDekIsS0FBSyxNQUFNLGdCQUFnQjtPQUMzQixLQUFLLE1BQU0sZ0JBQWdCOzs7Ozs7Ozs7OztZQWdDVixVQUN0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFRMEMsR0FBRzs7Ozs7Ozs0QkFBYyxHQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQUpqQixHQUFRLElBQUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7OztpRUFBakIsR0FBUSxJQUFDLFFBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztZQUtyQyxxQkFDeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBTDBCLEdBQVEsSUFBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7cUZBQWpCLEdBQVEsSUFBQyxRQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1lBY2IsYUFBVzs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFDSixTQUFPOzs7Ozs7Ozs7Ozs7Ozs7OztZQUNqQixpQkFBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7WUFDZixTQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUhULEdBQUc7Ozs7Ozs7Ozs7NkJBQ0csR0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQ0FHSixLQUFLOzs7O3NDQUNMLElBQUk7Ozs7OzthQUxhLFlBQ2hEOzs7O2FBQ2lELFlBQ2pEOzthQUF5QyxZQUN6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5Q0FQOEIsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFiL0IsR0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FQbEIsTUFpQks7R0FoQkgsTUFJSzs7O0dBQ0wsTUFVSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VBM0NJLElBQUk7RUFDWCxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUk7UUFDUCxJQUFJLENBQUMsS0FBSzs2QkFFZixTQUFTLEdBQUcsSUFBSTs7OztJQUNoQixRQUFRO0tBQ04sUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLO0tBQ3BCLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTs7Ozs7R0FHckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFROzs7O1VBSTlDLElBQUk7RUFDWCxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxFQUFFOzRCQUM5QixTQUFTLEdBQUcsSUFBSTtFQUNoQixVQUFVLENBQUMsR0FBRzs7O1VBR1AsR0FBRzsyQkFDVixRQUFROzJCQUNSLFFBQVEsR0FBRyxJQUFJO0VBQ2YsVUFBVSxDQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7In0=