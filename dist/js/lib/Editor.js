/* src/web/js/lib/Editor.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import { router } from 'yrv';
import Icon from './Icon.svelte';
import Ace from './Ace.svelte';
import Toggle from './Toggle.svelte';
import { schemas, current, options, loadFrom } from './gists';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	return child_ctx;
}

// (192:2) {:else}
function create_else_block(ctx) {
	let div0;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let div1;
	let ace0;
	let t2;
	let ace1;
	let current;
	let each_value = /*$schemas*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const if_block_creators = [create_if_block_1, create_else_block_1];
	const if_blocks = [];

	function select_block_type_3(ctx, dirty) {
		if (/*isAdding*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_3(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	ace0 = new Ace({
			props: {
				mode: outputMode,
				value: /*editInput*/ ctx[5]
			}
		});

	ace0.$on("change", /*sync*/ ctx[13]);

	ace1 = new Ace({
			props: {
				mode: outputMode,
				value: /*objectOutput*/ ctx[6],
				readonly: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			if_block.c();
			t1 = space();
			div1 = element("div");
			create_component(ace0.$$.fragment);
			t2 = space();
			create_component(ace1.$$.fragment);
			attr(div0, "class", "flx Tabs");
			attr(div1, "class", "md-flx");
		},
		m(target, anchor) {
			insert(target, div0, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			append(div0, t0);
			if_blocks[current_block_type_index].m(div0, null);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
			mount_component(ace0, div1, null);
			append(div1, t2);
			mount_component(ace1, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*remove, $schemas, input, close, update, isEditing, select, $current*/ 3979) {
				each_value = /*$schemas*/ ctx[7];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_3(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div0, null);
			}

			const ace0_changes = {};
			if (dirty[0] & /*editInput*/ 32) ace0_changes.value = /*editInput*/ ctx[5];
			ace0.$set(ace0_changes);
			const ace1_changes = {};
			if (dirty[0] & /*objectOutput*/ 64) ace1_changes.value = /*objectOutput*/ ctx[6];

			if (dirty[1] & /*$$scope*/ 32) {
				ace1_changes.$$scope = { dirty, ctx };
			}

			ace1.$set(ace1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(ace0.$$.fragment, local);
			transition_in(ace1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(ace0.$$.fragment, local);
			transition_out(ace1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_each(each_blocks, detaching);
			if_blocks[current_block_type_index].d();
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			destroy_component(ace0);
			destroy_component(ace1);
		}
	};
}

// (190:2) {#if pending}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("Loading gist...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (204:8) {:else}
function create_else_block_3(ctx) {
	let span;
	let button0;
	let t0_value = /*info*/ ctx[33].filename + "";
	let t0;
	let t1;
	let button1;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[19](/*info*/ ctx[33]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[20](/*info*/ ctx[33]);
	}

	return {
		c() {
			span = element("span");
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			button1 = element("button");
			button1.textContent = "×";
			attr(button1, "class", "nb x-close");
			attr(span, "class", "flx");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, button0);
			append(button0, t0);
			append(span, t1);
			append(span, button1);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler_1),
					listen(button1, "click", click_handler_2)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*$schemas*/ 128 && t0_value !== (t0_value = /*info*/ ctx[33].filename + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (195:8) {#if $current === info}
function create_if_block_2(ctx) {
	let span;
	let t0;
	let button;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*isEditing*/ ctx[3]) return create_if_block_3;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_2(ctx, [-1, -1]);
	let if_block = current_block_type(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[18](/*info*/ ctx[33]);
	}

	return {
		c() {
			span = element("span");
			if_block.c();
			t0 = space();
			button = element("button");
			button.textContent = "×";
			attr(button, "class", "nb x-close");
			attr(span, "class", "sel");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if_block.m(span, null);
			append(span, t0);
			append(span, button);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, t0);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (199:12) {:else}
function create_else_block_2(ctx) {
	let span;
	let t_value = /*info*/ ctx[33].filename + "";
	let t;
	let mounted;
	let dispose;

	function dblclick_handler() {
		return /*dblclick_handler*/ ctx[17](/*info*/ ctx[33]);
	}

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "dib");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);

			if (!mounted) {
				dispose = listen(span, "dblclick", dblclick_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*$schemas*/ 128 && t_value !== (t_value = /*info*/ ctx[33].filename + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (197:12) {#if isEditing}
function create_if_block_3(ctx) {
	let input_1;
	let input_1_value_value;
	let mounted;
	let dispose;

	return {
		c() {
			input_1 = element("input");
			attr(input_1, "class", "nb");
			attr(input_1, "type", "text");
			attr(input_1, "spellcheck", "false");
			input_1.value = input_1_value_value = /*info*/ ctx[33].filename;
		},
		m(target, anchor) {
			insert(target, input_1, anchor);
			/*input_1_binding*/ ctx[16](input_1);

			if (!mounted) {
				dispose = [
					listen(input_1, "blur", /*close*/ ctx[8]),
					listen(input_1, "keyup", /*update*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*$schemas*/ 128 && input_1_value_value !== (input_1_value_value = /*info*/ ctx[33].filename) && input_1.value !== input_1_value_value) {
				input_1.value = input_1_value_value;
			}
		},
		d(detaching) {
			if (detaching) detach(input_1);
			/*input_1_binding*/ ctx[16](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (194:6) {#each $schemas as info}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*$current*/ ctx[0] === /*info*/ ctx[33]) return create_if_block_2;
		return create_else_block_3;
	}

	let current_block_type = select_block_type_1(ctx, [-1, -1]);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (215:8) {:else}
function create_else_block_1(ctx) {
	let span;
	let button;
	let icon;
	let current;
	let mounted;
	let dispose;
	icon = new Icon({ props: { name: "plus" } });

	return {
		c() {
			span = element("span");
			button = element("button");
			create_component(icon.$$.fragment);
			attr(button, "class", "a nb nbk");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, button);
			mount_component(icon, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*add*/ ctx[14]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};
}

// (211:8) {#if isAdding}
function create_if_block_1(ctx) {
	let span;
	let input_1;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			input_1 = element("input");
			attr(input_1, "class", "nb");
			attr(input_1, "type", "text");
			attr(input_1, "spellcheck", "false");
			attr(span, "class", "sel");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, input_1);
			/*input_1_binding_1*/ ctx[21](input_1);

			if (!mounted) {
				dispose = [
					listen(input_1, "blur", /*close*/ ctx[8]),
					listen(input_1, "keyup", /*submit*/ ctx[12])
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
			/*input_1_binding_1*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (229:6) <Ace mode={outputMode} value={objectOutput} readonly>
function create_default_slot(ctx) {
	let span;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			button = element("button");
			button.textContent = "Generate";
			attr(button, "class", "bu");
			attr(span, "class", "abs r0 t0");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, button);

			if (!mounted) {
				dispose = listen(button, "click", /*gen*/ ctx[15]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*pending*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "nosl");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

let outputMode = 'json';

function validate(e) {
	const isValid = (/^[a-zA-Z0-9_#$%][\w.]*?$/).test(e.target.value);

	if (isValid) {
		e.target.classList.remove('invalid');
		return true;
	}

	if (!e.target.classList.contains('invalid')) {
		e.target.classList.add('invalid');
		return false;
	}
}

function instance($$self, $$props, $$invalidate) {
	let $current;
	let $schemas;
	let $options;
	component_subscribe($$self, current, $$value => $$invalidate(0, $current = $$value));
	component_subscribe($$self, schemas, $$value => $$invalidate(7, $schemas = $$value));
	component_subscribe($$self, options, $$value => $$invalidate(28, $options = $$value));
	const initialLocationHash = window.location.hash;
	let data;
	let input;
	let buffer;
	let selected;
	let isAdding;
	let isEditing;
	let previusURL;
	let value = null;
	let isYAML = false;
	let Encoder = JSON;
	let pending = true;
	let editInput = '{}';
	let objectOutput = '{}';

	function close(e) {
		if (input && (isAdding || isEditing)) {
			if (isAdding) {
				set_store_value(current, $current = selected || $schemas[$schemas.length - 1], $current);
			}

			$$invalidate(2, isAdding = false);
			$$invalidate(3, isEditing = false);
		}
	}

	function select(e, edit) {
		set_store_value(current, $current = selected = e, $current);
		$$invalidate(2, isAdding = false);
		$$invalidate(3, isEditing = !!edit);
		if (edit) setTimeout(() => input.select(), 60);
	}

	function remove(e) {
		if (!confirm(`This action will remove the '${e.filename}' file.\n\nAre you sure?`.trim())) return;
		const offset = $schemas.indexOf(e);
		set_store_value(schemas, $schemas = $schemas.filter(x => x !== e), $schemas);

		if (e.filename === $current.filename) {
			buffer = $$invalidate(5, editInput = '');
			set_store_value(current, $current = null, $current);
		}
	}

	function update(e) {
		if (e.keyCode === 27) close();

		if (validate(e) && e.keyCode === 13) {
			set_store_value(current, $current.filename = e.target.value, $current);
			$$invalidate(3, isEditing = false);
			e.target.value = '';
		}
	}

	function submit(e) {
		if (e.keyCode === 27) close();

		if (validate(e) && e.keyCode === 13) {
			set_store_value(
				schemas,
				$schemas = $schemas.concat({
					filename: e.target.value,
					content: buffer
				}),
				$schemas
			);

			set_store_value(current, $current = $schemas[$schemas.length - 1], $current);
			$$invalidate(2, isAdding = false);
			e.target.value = '';
		}
	}

	// FIXME: how formatting should work?
	// it should not affect current state, just formatting!
	function refresh() {
		try {
			$$invalidate(5, editInput = JSON.stringify(JSON.parse($current.content), null, 2));
		} catch(e) {
			$$invalidate(5, editInput = $current.content); // if (isYAML) {
		} // outputMode = 'json';
	}

	function format(e) {
		value = Encoder.parse($current.content);
		isYAML = e.detail;
		refresh();
	}

	function sync(e) {
		buffer = e.detail;
		if ($current) set_store_value(current, $current.content = buffer, $current);
	}

	function add() {
		buffer = $$invalidate(5, editInput = '');
		selected = $current;
		$$invalidate(2, isAdding = true);
		set_store_value(current, $current = null, $current);
		setTimeout(() => input.focus(), 60);
	}

	function gen() {
		const opts = { ...$options };
		const value = opts.random;
		opts.random = value ? () => value : Math.random;
		let schema = {};
		let refs = [];

		try {
			schema = Encoder.parse($current.content);
			refs = $schemas.map(x => Encoder.parse(x.content));
		} catch(e) {
			
		} // do nothing

		JSONSchemaFaker.option(opts);

		JSONSchemaFaker.resolve(schema, refs).then(result => {
			$$invalidate(6, objectOutput = Encoder.stringify(result, null, 2));
		}).catch(error => alert(error.message));
	}

	router.subscribe(async info => {
		if (!window.location.hash || window.location.hash.match(/^#(options|session)/)) {
			$$invalidate(4, pending = false);
			return;
		}

		if (info.path === previusURL) return;
		previusURL = info.path;
		data = await loadFrom(info.path.substr(1));
		buffer = $$invalidate(5, editInput = '');
		$$invalidate(4, pending = false);
		$$invalidate(2, isAdding = false);
		$$invalidate(3, isEditing = false);

		set_store_value(
			schemas,
			$schemas = Object.keys(data.files).filter(x => ['text/plain', 'application/json'].includes(data.files[x].type)).reduce(
				(prev, cur) => {
					prev.push(data.files[cur]);
					return prev;
				},
				[]
			),
			$schemas
		);

		set_store_value(current, $current = $schemas[0], $current);
	});

	function input_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			input = $$value;
			$$invalidate(1, input);
		});
	}

	const dblclick_handler = info => select(info, true);
	const click_handler = info => remove(info);
	const click_handler_1 = info => select(info);
	const click_handler_2 = info => remove(info);

	function input_1_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			input = $$value;
			$$invalidate(1, input);
		});
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$current*/ 1) {
			$: if ($current) {
				refresh();
			} else {
				$$invalidate(6, objectOutput = '{}');
				buffer = $$invalidate(5, editInput = '');
				set_store_value(current, $current = { content: '' }, $current);
			}
		}
	};

	return [
		$current,
		input,
		isAdding,
		isEditing,
		pending,
		editInput,
		objectOutput,
		$schemas,
		close,
		select,
		remove,
		update,
		submit,
		sync,
		add,
		gen,
		input_1_binding,
		dblclick_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		input_1_binding_1
	];
}

class Editor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1]);
	}
}

export default Editor;//# sourceMappingURL=data:application/json;charset=utf-8;base64,